{"version":3,"sources":["StocksSymbols.js","Header.js","Chart.js","Content.js","data.js","App.js","index.js"],"names":["StockSymbol","tickerSymbols","setCurrentSymbol","useState","input","setInput","filteredSymbols","setFilteredSymbols","className","type","value","onChange","e","inputValue","target","filteredArray","filter","symbol","length","toLowerCase","substr","map","id","onClick","Header","Chart","React","memo","stockData","data","labels","dates","datasets","label","backgroundColor","borderColor","borderWidth","pointRadius","pointHoverRadius","pointBackgroundColor","autoSkip","movingAverage","options","maintainAspectRatio","responsive","initialState","currentTimeframe","reducer","state","action","Error","Content","currentSymbol","originalData","setOriginalData","useReducer","timeFrame","dispatch","setStockData","listOfDates","setListOfDates","setMovingAverage","params","f","outputSize","apiKey","parseData","requiredDates","dataForCurrentTimeframe","dataForMovingAvgCalculation","arr","Object","entries","allDates","subArr","slice","reverse","element","set20DayMovingAvg","movingAvg","sum","i","j","parseInt","push","useEffect","fetch","then","response","ok","statusText","json","catch","error","console","log","undefined","symbols","App","allSymbols","setAllSymbols","currentID","currentString","newObj","prev","fetchSymbols","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.079dbc17.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst StockSymbol = ({ tickerSymbols, setCurrentSymbol }) => {\n  const [input, setInput] = useState(\"\");\n  const [filteredSymbols, setFilteredSymbols] = useState([]);\n\n  const handleChange = (e) => {\n    const inputValue = e.target.value;\n    setInput(inputValue);\n\n    const filteredArray = tickerSymbols.filter(({ symbol }) => {\n      return (\n        inputValue.length <= symbol.length &&\n        inputValue.toLowerCase() ===\n          symbol.substr(0, inputValue.length).toLowerCase()\n      );\n    });\n\n    setFilteredSymbols(filteredArray);\n  };\n  return (\n    <aside className=\"stock-symbols-container\">\n      <div className=\"stock-symbol-header-container\">\n        <h3 className=\"stock-symbol-header\">Symbols</h3>\n        <form className=\"query-form\">\n          <div className=\"input-container \">\n            <input type=\"text\" value={input} onChange={handleChange} />\n            <span className=\"input-arrow\"></span>\n          </div>\n        </form>\n      </div>\n      <ul className=\"stock-symbol-list\">\n        {!input\n          ? tickerSymbols.map(({ symbol, id }) => {\n              return (\n                <li className=\"stock-symbol-list-item\" key={id}>\n                  <button\n                    className=\"ticker-symbol\"\n                    onClick={() => setCurrentSymbol(symbol)}\n                  >\n                    {symbol}\n                  </button>\n                </li>\n              );\n            })\n          : filteredSymbols.map(({ symbol, id }) => {\n              return (\n                <li className=\"stock-symbol-list-item\" key={id}>\n                  <button\n                    className=\"ticker-symbol\"\n                    onClick={() => setCurrentSymbol(symbol)}\n                  >\n                    {symbol}\n                  </button>\n                </li>\n              );\n            })}\n      </ul>\n    </aside>\n  );\n};\n\nexport default StockSymbol;\n","import React from \"react\";\n\nconst Header = () => {\n  return (\n    <header className=\"header-container\">\n      <h1 className=\"header-title\">20 Day Tracker</h1>\n    </header>\n  );\n};\n\nexport default Header;\n","import { Line } from \"react-chartjs-2\";\nimport React from \"react\";\n\n// Const values for chart\nconst pointRadiusVal = 1;\nconst pointHoverRadiusVal = 1;\n\nconst Chart = React.memo(({ stockData, dates, movingAverage }) => {\n  const data = {\n    labels: dates,\n    datasets: [\n      {\n        label: \"Price\",\n        data: stockData,\n        backgroundColor: \"rgba(255, 99, 132, 0.2)\",\n        borderColor: \"rgba(255, 99, 132, 1)\",\n        borderWidth: 1,\n        pointRadius: pointHoverRadiusVal,\n        pointHoverRadius: pointHoverRadiusVal,\n        pointBackgroundColor: \"rgba(255, 99, 132, 1)\",\n        autoSkip: true,\n      },\n      {\n        label: \"Moving Average\",\n        data: movingAverage,\n        backgroundColor: \"rgba(54, 162, 235, 0.2)\",\n        borderColor: \"rgba(54, 162, 235, 1)\",\n        borderWidth: 1,\n        pointRadius: pointRadiusVal,\n        pointHoverRadius: pointHoverRadiusVal,\n        pointBackgroundColor: \"rgba(54, 162, 235, 1)\",\n        autoSkip: true,\n      },\n    ],\n  };\n\n  return (\n    <div className=\"chart-container\">\n      <Line\n        data={data}\n        options={{ maintainAspectRatio: false, responsive: true }}\n      />\n    </div>\n  );\n});\n\nexport default Chart;\n","import React from \"react\";\nimport Chart from \"./Chart\";\nimport { useState, useEffect, useReducer, useCallback } from \"react\";\n\n// currentTimeframe in months\nconst initialState = {\n  currentTimeframe: 21 * 6,\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"1M\":\n      return { currentTimeframe: 21 };\n    case \"3M\":\n      return { currentTimeframe: 21 * 3 };\n    case \"6M\":\n      return { currentTimeframe: 21 * 6 };\n    case \"1Y\":\n      return { currentTimeframe: 21 * 12 };\n    case \"3Y\":\n      return { currentTimeframe: 21 * 12 * 3 };\n    default:\n      throw new Error(`Invalid initial state for timeline!`);\n  }\n};\n\nconst Content = ({ currentSymbol }) => {\n  const [originalData, setOriginalData] = useState({});\n  const [timeFrame, dispatch] = useReducer(reducer, initialState);\n  const [stockData, setStockData] = useState([]);\n  const [listOfDates, setListOfDates] = useState([]);\n  const [movingAverage, setMovingAverage] = useState([]);\n\n  const baseURL = \"https://www.alphavantage.co/query?\";\n  const params = {\n    f: \"TIME_SERIES_DAILY_ADJUSTED\",\n    symbol: currentSymbol,\n    outputSize: \"full\",\n    apiKey: \"IBA86A2CGCBIGGHP\",\n  };\n\n  const parseData = (data) => {\n    data = data[\"Time Series (Daily)\"];\n\n    if (data) {\n      let arr = Object.entries(data);\n\n      // Get array of the approriate dates\n      let allDates = arr.map((subArr) => subArr[0]);\n      let requiredDates;\n\n      // Check if there's less data than timeFrame.currentTimeframe (newly created stocks)\n      // Stock needs to have at least 19 days more than the currentTimeframe\n      if (timeFrame.currentTimeframe + 19 <= allDates.length) {\n        requiredDates = allDates.slice(0, timeFrame.currentTimeframe);\n      } else {\n        requiredDates = allDates.slice(0, allDates.length - 19);\n      }\n\n      // API returns dates from newest to oldest\n      requiredDates.reverse();\n      setListOfDates(requiredDates);\n\n      arr = arr.map((element) => element[1][\"4. close\"]);\n      arr.reverse();\n\n      let dataForCurrentTimeframe;\n      let dataForMovingAvgCalculation;\n\n      if (arr.length - timeFrame.currentTimeframe >= 19) {\n        dataForCurrentTimeframe = arr.slice(\n          arr.length - timeFrame.currentTimeframe,\n          arr.length\n        );\n        dataForMovingAvgCalculation = arr.slice(\n          arr.length - timeFrame.currentTimeframe - 19,\n          arr.length\n        );\n      }\n      // Account for newly created stocks (don't have enough data for timeframe)\n      // Will display the maximum timeframe\n      else {\n        // Can't calculate moving avg on the first 19 days\n        dataForCurrentTimeframe = arr.slice(19, arr.length);\n        dataForMovingAvgCalculation = arr;\n      }\n\n      set20DayMovingAvg(dataForMovingAvgCalculation);\n      return dataForCurrentTimeframe;\n    }\n  };\n\n  const set20DayMovingAvg = (data) => {\n    let movingAvg = [];\n    let sum = 0;\n    for (let i = 0; i < data.length - 19; i++) {\n      for (let j = 0; j < 20; j++) {\n        sum += parseInt(data[i + j]);\n      }\n      movingAvg.push(sum / 20.0);\n      sum = 0;\n    }\n    setMovingAverage(movingAvg);\n  };\n\n  useEffect(() => {\n    fetch(\n      `${baseURL}function=${params.f}&symbol=${params.symbol}&outputsize=${params.outputSize}&apikey=${params.apiKey}`\n    )\n      .then((response) => {\n        if (!response.ok) throw Error(response.statusText);\n        return response.json();\n      })\n      .then((data) => {\n        const stockData = parseData(data);\n        setOriginalData(data); // Need original data so we only need to fetch once\n        setStockData(stockData); // and not every timeframe change\n      })\n      .catch((error) => console.log(error));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    currentSymbol,\n    params.apiKey,\n    params.f,\n    params.outputSize,\n    params.symbol,\n  ]);\n\n  useEffect(() => {\n    if (stockData) {\n      setStockData(parseData(originalData));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [timeFrame]);\n\n  return (\n    <section className=\"content-container\">\n      <h3 className=\"active-ticker-symbol\">{currentSymbol}</h3>\n      <div className=\"time-frame-container\">\n        <h6\n          className={\n            timeFrame.currentTimeframe === 21 ? \"active-timeframe\" : undefined\n          }\n          onClick={() => dispatch({ type: \"1M\" })}\n        >\n          1M\n        </h6>\n        <h6\n          className={\n            timeFrame.currentTimeframe === 21 * 3\n              ? \"active-timeframe\"\n              : undefined\n          }\n          onClick={() => dispatch({ type: \"3M\" })}\n        >\n          3M\n        </h6>\n        <h6\n          className={\n            timeFrame.currentTimeframe === 21 * 6\n              ? \"active-timeframe\"\n              : undefined\n          }\n          onClick={() => dispatch({ type: \"6M\" })}\n        >\n          6M\n        </h6>\n        <h6\n          className={\n            timeFrame.currentTimeframe === 21 * 12\n              ? \"active-timeframe\"\n              : undefined\n          }\n          onClick={() => dispatch({ type: \"1Y\" })}\n        >\n          1Y\n        </h6>\n        <h6\n          className={\n            timeFrame.currentTimeframe === 21 * 12 * 3\n              ? \"active-timeframe\"\n              : undefined\n          }\n          onClick={() => dispatch({ type: \"3Y\" })}\n        >\n          3Y\n        </h6>\n      </div>\n      <Chart\n        stockData={stockData}\n        dates={listOfDates}\n        movingAverage={movingAverage}\n      />\n    </section>\n  );\n};\n\nexport default Content;\n","const symbols = `AAPL\nABBV\nABT \nAGNC\nAMD\nAMGN\nAPL\nARLP\nBAC\nBCE\nBMY \nCCJ \nCOP\nCOST\nCS\nCSX\nCU\nCVX\nCXW \nDLTR\nENB\nFCX \nGDX \nGILD\nGLD\nGOLD\nHCC \nHD\nIBM\nINTC\nJNJ\nKL\nKO\nKMB \nMSFT\nMGA\nMMP \nMRK\nNEM \nNIO \nNLY \nOVV \nPFE\nPG\nPSX\nQCOM\nSBUX\nSLV \nSNY\nSPY\nSU\nT\nTSLA\nTSM\nU\nVTRS\nVZ\nWFC\nWMT \nXLU\nXOM\nXOP`;\n\nexport { symbols };\n","import \"./App.css\";\nimport StockSymbols from \"./StocksSymbols\";\nimport Header from \"./Header\";\nimport Content from \"./Content\";\nimport { useState, useEffect } from \"react\";\nimport { symbols } from \"./data\";\n\nconst App = () => {\n  const [currentSymbol, setCurrentSymbol] = useState(\"\");\n  const [allSymbols, setAllSymbols] = useState([]);\n\n  useEffect(() => {\n    const fetchSymbols = () => {\n      let currentID = 1;\n      let currentString = \"\";\n      for (let i = 0; i < symbols.length; i++) {\n        if (symbols[i] === \"\\n\") {\n          // Set current symbol to first symbol\n          if (currentID === 1) {\n            setCurrentSymbol(currentString);\n          }\n          const newObj = { id: currentID, symbol: currentString };\n          currentID++;\n          setAllSymbols((prev) => [...prev, newObj]);\n          currentString = \"\";\n        } else if (symbols[i] !== \" \") {\n          currentString += symbols[i];\n        }\n      }\n    };\n    fetchSymbols();\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <Header />\n      <Content currentSymbol={currentSymbol} />\n      <StockSymbols\n        tickerSymbols={allSymbols}\n        setCurrentSymbol={setCurrentSymbol}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}